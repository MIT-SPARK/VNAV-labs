FROM ubuntu:20.04
WORKDIR /workspace

# To avoid tzdata asking for geographic location...
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends apt-utils
RUN apt-get update \
    && apt-get install -y \
         build-essential \
         ca-certificates \
         cmake \
         git \
         gfortran \
         libatlas-base-dev \
         libavcodec-dev \
         libavformat-dev \
         libboost-all-dev \
         libdc1394-22-dev \
         libeigen3-dev \
         libgflags-dev \
         libglw1-mesa-dev \
         libglew-dev \
         libgoogle-glog-dev \
         libgtk2.0-dev \
         libjpeg-dev \
         libopencv-dev \
         libopencv-contrib-dev \
         libpng-dev \
         libpython3-dev \
         libssl-dev \
         libswscale-dev \
         libtbb-dev \
         libtiff-dev \
         pkg-config \
         unzip \
    && rm -rf /var/lib/apt/lists/*

RUN git clone --depth 1 --branch 4.2 https://github.com/borglab/gtsam.git \
    && cd gtsam \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local \
                -DCMAKE_BUILD_TYPE=Release \
                -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF \
                -DGTSAM_BUILD_TESTS=OFF \
                -DGTSAM_BUILD_EXAMPLES_ALWAYS=OFF \
                -DCMAKE_BUILD_TYPE=Release \
                -DGTSAM_BUILD_UNSTABLE=ON \
                -DGTSAM_POSE3_EXPMAP=ON \
                -DGTSAM_ROT3_EXPMAP=ON \
                -DGTSAM_TANGENT_PREINTEGRATION=OFF \
                -DGTSAM_USE_SYSTEM_EIGEN=ON \
    && make -j$(nproc) install

RUN git clone https://github.com/marcusabate/opengv \
    && cd opengv \
    && git apply march_native_disable.patch \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=/usr/local \
    && make -j$(nproc) install

RUN git clone https://github.com/dorian3d/DBoW2.git \
    && cd DBoW2 \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make -j$(nproc) install

RUN git clone https://github.com/MIT-SPARK/Kimera-RPGO.git \
    && cd Kimera-RPGO \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
    && make -j$(nproc) install

RUN git clone --depth 1 --branch feature/prerelease https://github.com/MIT-SPARK/Kimera-VIO.git \
    && cd Kimera-VIO \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DKIMERA_BUILD_TESTS=OFF \
    && make -j$(nproc) install

COPY .run_kimera.sh run_kimera.sh
CMD bash run_kimera.sh
